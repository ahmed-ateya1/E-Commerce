<?xml version="1.0"?>
<doc>
    <assembly>
        <name>E-Commerce.API</name>
    </assembly>
    <members>
        <member name="T:E_Commerce.API.Controllers.AccountController">
            <summary>
            Manages user accounts, including registration, login, password reset, roles, and token handling.
            </summary>
        </member>
        <member name="M:E_Commerce.API.Controllers.AccountController.#ctor(E_Commerce.Core.ServicesContract.IAuthenticationServices,Microsoft.AspNetCore.Identity.UserManager{E_Commerce.Core.Domain.IdentityEntities.ApplicationUser},Microsoft.AspNetCore.Identity.UI.Services.IEmailSender,Microsoft.AspNetCore.Identity.SignInManager{E_Commerce.Core.Domain.IdentityEntities.ApplicationUser},E_Commerce.Core.Domain.RepositoriesContract.IUnitOfWork,Microsoft.AspNetCore.Identity.IPasswordHasher{E_Commerce.Core.Domain.IdentityEntities.ApplicationUser})">
            <summary>
            Initializes a new instance of the <see cref="T:E_Commerce.API.Controllers.AccountController"/> class.
            </summary>
            <param name="authenticationServices">Authentication service.</param>
            <param name="userManager">User manager service.</param>
            <param name="emailSender">Email sender service.</param>
            <param name="signInManager">Sign-in manager service.</param>
            <param name="unitOfWork">Unit of work service.</param>
            <param name="passwordHasher">Password hasher service.</param>
        </member>
        <member name="M:E_Commerce.API.Controllers.AccountController.RegisterCleintAsync(E_Commerce.Core.Dtos.AuthenticationDto.RegisterDTO)">
            <summary>
            Registers a new client account.
            </summary>
            <param name="registerDTO">Client registration details.</param>
            <returns>Authentication response with token and status.</returns>
            <response code="200">Client registered successfully.</response>
            <response code="400">Invalid input or request.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.AccountController.LoginAsync(E_Commerce.Core.Dtos.AuthenticationDto.LoginDTO)">
            <summary>
            Logs in a user or company.
            </summary>
            <param name="loginDTO">Login credentials (email, password).</param>
            <returns>Authentication response with token and status.</returns>
            <response code="200">Login successful.</response>
            <response code="400">Invalid credentials or input.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.AccountController.ForgotPassword(E_Commerce.Core.Dtos.AuthenticationDto.ForgotPasswordDTO)">
            <summary>
            Sends a password reset OTP to the user's email.
            </summary>
            <param name="forgotPassword">Email to send the password reset link to.</param>
            <returns>Status message.</returns>
            <response code="200">Password reset OTP sent successfully.</response>
            <response code="400">Invalid input.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.AccountController.ResetPassword(E_Commerce.Core.Dtos.AuthenticationDto.ResetPasswordDTO)">
            <summary>
            Resets the user's password using an OTP.
            </summary>
            <param name="resetPassword">Reset password request details, including OTP.</param>
            <returns>Status message.</returns>
            <response code="200">Password reset successfully.</response>
            <response code="400">Invalid OTP or request.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.AccountController.ChangePassword(E_Commerce.Core.Dtos.AuthenticationDto.ChangePasswordRequest)">
            <summary>
            Changes the user's password.
            </summary>
            <param name="model">Change password request details.</param>
            <returns>Status message.</returns>
            <response code="200">Password changed successfully.</response>
            <response code="400">Invalid current password.</response>
            <response code="404">User not found.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.AccountController.IsEmailInUse(System.String)">
            <summary>
            Checks if the email is already in use.
            </summary>
            <param name="email">The email to check.</param>
            <returns>True if the email is in use; otherwise, false.</returns>
            <response code="200">Check successful, result returned.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.AccountController.VerifyOtp(E_Commerce.Core.Dtos.AuthenticationDto.OtpVerificationRequest)">
            <summary>
            Verifies the OTP code.
            </summary>
            <param name="request">OTP verification request.</param>
            <returns>Status message.</returns>
            <response code="200">OTP verified successfully.</response>
            <response code="400">Invalid or expired OTP.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.AccountController.AddRoleAsync(E_Commerce.Core.Dtos.AuthenticationDto.AddRoleDTO)">
            <summary>
            Adds a new role to the user.
            </summary>
            <param name="model">Role details to assign.</param>
            <returns>Status message.</returns>
        </member>
        <member name="M:E_Commerce.API.Controllers.AccountController.RefreshToken">
            <summary>
            Refreshes the user's authentication token.
            </summary>
            <returns>New authentication token.</returns>
        </member>
        <member name="M:E_Commerce.API.Controllers.AccountController.RevokeToken(E_Commerce.Core.Dtos.AuthenticationDto.RevokTokenDTO)">
            <summary>
            Revokes a refresh token.
            </summary>
            <param name="revokTokenDTO">Token details to revoke.</param>
            <returns>Status message.</returns>
        </member>
        <member name="M:E_Commerce.API.Controllers.AccountController.SetRefreshToken(System.String,System.DateTime)">
            <summary>
            Sets the refresh token cookie in the response.
            </summary>
            <param name="refreshToken">The refresh token string.</param>
            <param name="expires">The expiration time for the token.</param>
        </member>
        <member name="M:E_Commerce.API.Controllers.AddressDeliveryController.AddAddressDeliveryAsync(E_Commerce.Core.Dtos.AddressDto.AddressAddRequest)">
            <summary>
            Adds a new address delivery.
            </summary>
            <param name="request">The address delivery details to be added.</param>
            <returns>
            Returns an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> indicating success or failure of the operation.
            </returns>
            <remarks>
            **HTTP Status Codes**:
            - 200 OK: If the address delivery was added successfully.
            - 400 BadRequest: If the address delivery could not be added.
            </remarks>
        </member>
        <member name="M:E_Commerce.API.Controllers.AddressDeliveryController.GetAddressDeliveryAsync(System.Guid)">
            <summary>
            Retrieves a specific address delivery by its ID.
            </summary>
            <param name="addressId">The unique identifier of the address delivery.</param>
            <returns>
            Returns an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> containing the address delivery details.
            </returns>
            <remarks>
            **HTTP Status Codes**:
            - 200 OK: If the address delivery was retrieved successfully.
            - 400 BadRequest: If the address delivery could not be retrieved.
            </remarks>
        </member>
        <member name="M:E_Commerce.API.Controllers.AddressDeliveryController.GetAllAddressDeliveryAsync">
            <summary>
            Retrieves all address deliveries.
            </summary>
            <returns>
            Returns an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> containing a list of all address deliveries.
            </returns>
            <remarks>
            **HTTP Status Codes**:
            - 200 OK: If all address deliveries were retrieved successfully.
            - 400 BadRequest: If the retrieval failed.
            </remarks>
        </member>
        <member name="M:E_Commerce.API.Controllers.AddressDeliveryController.GetAddressDeliveryByUserAsync">
            <summary>
            Retrieves all address deliveries for the authenticated user.
            </summary>
            <returns>
            Returns an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> containing the address deliveries for the user.
            </returns>
            <remarks>
            **HTTP Status Codes**:
            - 200 OK: If the address deliveries were retrieved successfully.
            - 400 BadRequest: If the retrieval failed or the user is not authenticated.
            </remarks>
        </member>
        <member name="M:E_Commerce.API.Controllers.AddressDeliveryController.DeleteAddressDeliveryAsync(System.Guid)">
            <summary>
            Deletes a specific address delivery by its ID.
            </summary>
            <param name="addressId">The unique identifier of the address delivery.</param>
            <returns>
            Returns an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> indicating success or failure of the operation.
            </returns>
            <remarks>
            **HTTP Status Codes**:
            - 200 OK: If the address delivery was deleted successfully.
            - 400 BadRequest: If the address delivery could not be deleted.
            </remarks>
        </member>
        <member name="T:E_Commerce.API.Controllers.BrandController">
            <summary>
            Controller to manage brand-related operations in the E-Commerce system.
            </summary>
        </member>
        <member name="M:E_Commerce.API.Controllers.BrandController.#ctor(E_Commerce.Core.Domain.RepositoriesContract.IUnitOfWork,MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{E_Commerce.API.Controllers.BrandController})">
            <summary>
            Initializes a new instance of the <see cref="T:E_Commerce.API.Controllers.BrandController"/> class.
            </summary>
            <param name="unitOfWork">Instance of <see cref="T:E_Commerce.Core.Domain.RepositoriesContract.IUnitOfWork"/> for database operations.</param>
            <param name="mediator">Instance of <see cref="T:MediatR.IMediator"/> for handling commands and queries.</param>
            <param name="logger">Logger instance for logging actions.</param>
        </member>
        <member name="M:E_Commerce.API.Controllers.BrandController.AddBrand(E_Commerce.Core.Dtos.BrandDto.BrandAddRequest)">
            <summary>
            Creates a new brand.
            </summary>
            <param name="brand">The <see cref="T:E_Commerce.Core.Dtos.BrandDto.BrandAddRequest"/> containing the brand details.</param>
            <response code="200">Brand created successfully.</response>
            <response code="400">Failed to create the brand.</response>
            <returns>An API response indicating the result of the brand creation.</returns>
        </member>
        <member name="M:E_Commerce.API.Controllers.BrandController.UpdateBrand(E_Commerce.Core.Dtos.BrandDto.BrandUpdateRequest)">
            <summary>
            Updates an existing brand.
            </summary>
            <param name="brand">The <see cref="T:E_Commerce.Core.Dtos.BrandDto.BrandUpdateRequest"/> containing updated brand details.</param>
            <response code="200">Brand updated successfully.</response>
            <response code="404">Brand not found.</response>
            <response code="400">Failed to update the brand.</response>
            <returns>An API response indicating the result of the brand update.</returns>
        </member>
        <member name="M:E_Commerce.API.Controllers.BrandController.DeleteBrand(System.Guid)">
            <summary>
            Deletes a brand by its ID.
            </summary>
            <param name="id">The ID of the brand to delete.</param>
            <response code="200">Brand deleted successfully.</response>
            <response code="404">Brand not found.</response>
            <response code="400">Failed to delete the brand.</response>
            <returns>An API response indicating the result of the brand deletion.</returns>
        </member>
        <member name="M:E_Commerce.API.Controllers.BrandController.GetBrand(System.Guid)">
            <summary>
            Retrieves a brand by its ID.
            </summary>
            <param name="id">The ID of the brand to retrieve.</param>
            <response code="200">Brand retrieved successfully.</response>
            <response code="404">Brand not found.</response>
            <returns>An API response containing the retrieved brand details.</returns>
        </member>
        <member name="M:E_Commerce.API.Controllers.BrandController.GetAllBrands">
            <summary>
            Retrieves all brands.
            </summary>
            <response code="200">Brands retrieved successfully.</response>
            <response code="404">No brands found matching the name.</response>
            <returns>An API response containing the list of brands matching the name.</returns>
        </member>
        <member name="M:E_Commerce.API.Controllers.BrandController.GetBrandByName(System.String)">
            <summary>
            Retrieves brands by their name.
            </summary>
            <param name="name">The name of the brand to search for.</param>
            <response code="200">Brands retrieved successfully.</response>
            <response code="404">No brands found matching the name.</response>
            <returns>An API response containing the list of brands matching the name.</returns>
        </member>
        <member name="T:E_Commerce.API.Controllers.CategoryController">
            <summary>
            API Controller for managing categories.
            </summary>
        </member>
        <member name="M:E_Commerce.API.Controllers.CategoryController.#ctor(MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{E_Commerce.API.Controllers.CategoryController})">
            <summary>
            Initializes a new instance of the <see cref="T:E_Commerce.API.Controllers.CategoryController"/> class.
            </summary>
            <param name="mediator">The mediator instance for handling requests.</param>
            <param name="logger">The logger instance for logging information.</param>
        </member>
        <member name="M:E_Commerce.API.Controllers.CategoryController.AddCategory(E_Commerce.Core.Dtos.CategoryDto.CategoryAddRequest)">
            <summary>
            Adds a new category.
            </summary>
            <param name="command">The details of the category to be added.</param>
            <returns>An API response with the created category or an error message.</returns>
            <response code="200">Category added successfully.</response>
            <response code="400">Failed to add the category.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.CategoryController.UpdateCategory(E_Commerce.Core.Dtos.CategoryDto.CategoryUpdateRequest)">
            <summary>
            Updates an existing category.
            </summary>
            <param name="command">The updated category details.</param>
            <returns>An API response with the updated category or an error message.</returns>
            <response code="200">Category updated successfully.</response>
            <response code="400">Failed to update the category.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.CategoryController.DeleteCategory(System.Guid)">
            <summary>
            Deletes a category by ID.
            </summary>
            <param name="id">The ID of the category to be deleted.</param>
            <returns>An API response indicating success or failure.</returns>
            <response code="200">Category deleted successfully.</response>
            <response code="400">Failed to delete the category.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.CategoryController.GetCategories">
            <summary>
            Retrieves all categories.
            </summary>
            <returns>An API response with the list of categories or an error message.</returns>
            <response code="200">Categories retrieved successfully.</response>
            <response code="400">Failed to retrieve the categories.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.CategoryController.GetCategory(System.Guid)">
            <summary>
            Retrieves a category by ID.
            </summary>
            <param name="id">The ID of the category to retrieve.</param>
            <returns>An API response with the category details or an error message.</returns>
            <response code="200">Category retrieved successfully.</response>
            <response code="400">Failed to retrieve the category.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.CategoryController.GetCategoriesforParent(System.Guid)">
            <summary>
            Retrieves categories by parent ID.
            </summary>
            <param name="parentId">The ID of the parent category.</param>
            <returns>An API response with the list of categories or an error message.</returns>
            <response code="200">Categories retrieved successfully by parent.</response>
            <response code="400">Failed to retrieve categories by parent.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.CategoryController.GetCategoriesParent">
            <summary>
            Retrieves all parent categories.
            </summary>
            <remarks>
            This endpoint fetches a list of all parent categories available in the system.
            </remarks>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> containing an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/>:
            - If successful, the response will include the list of parent categories, a success message, and a status code of 200 (OK).
            - If unsuccessful, the response will include a failure message and a status code of 400 (Bad Request).
            </returns>
            <response code="200">Parent categories retrieved successfully.</response>
            <response code="400">Failed to retrieve parent categories.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.CategoryController.GetAllSubCategories">
            <summary>
            Retrieves all Subcategories.
            </summary>
            <remarks>
            This endpoint fetches a list of all Subcategories available in the system.
            </remarks>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> containing an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/>:
            - If successful, the response will include the list of Subcategories, a success message, and a status code of 200 (OK).
            - If unsuccessful, the response will include a failure message and a status code of 400 (Bad Request).
            </returns>
            <response code="200">Subcategories retrieved successfully.</response>
            <response code="400">Failed to retrieve Subcategories.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.DealController.AddDeal(DealAddRequest)">
            <summary>
            Adds a new deal based on the provided request data.
            </summary>
            <param name="request">An object of type <see cref="T:DealAddRequest"/> containing the details of the deal to be added.</param>
            <returns>
            Returns an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> indicating success or failure. 
            If the deal creation fails, a BadRequest response is returned, otherwise, the created deal details are returned.
            </returns>
            <remarks>
            This method validates the deal request and uses the <see cref="T:E_Commerce.Core.ServicesContract.IDealService"/> to create the deal. 
            The deal details are then saved in the system and returned in the response.
            </remarks>
            <response code="200">Deal added successfully.</response>
            <response code="400">Failed to add the deal or invalid data.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.DealController.UpdateDeal(E_Commerce.Core.Dtos.DealDto.DealUpdateRequest)">
            <summary>
            Updates an existing deal based on the provided request data.
            </summary>
            <param name="request">An object of type <see cref="T:E_Commerce.Core.Dtos.DealDto.DealUpdateRequest"/> containing the updated details for the deal.</param>
            <returns>
            Returns an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> indicating success or failure. 
            If the deal update fails, a BadRequest response is returned, otherwise, the updated deal details are returned.
            </returns>
            <remarks>
            This method validates the deal update request and uses the <see cref="T:E_Commerce.Core.ServicesContract.IDealService"/> to update the deal. 
            The updated deal details are then saved in the system and returned in the response.
            </remarks>
            <response code="200">Deal updated successfully.</response>
            <response code="400">Failed to update the deal or invalid data.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.DealController.DeleteDeal(System.Guid)">
            <summary>
            Deletes a deal based on the provided deal ID.
            </summary>
            <param name="id">The unique identifier of the deal to be deleted.</param>
            <returns>
            Returns an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> indicating success or failure. 
            If the deal deletion fails, a BadRequest response is returned, otherwise, a success message is returned.
            </returns>
            <remarks>
            This method uses the <see cref="T:E_Commerce.Core.ServicesContract.IDealService"/> to delete the deal from the system. 
            The deal is removed, and the appropriate response is returned.
            </remarks>
            <response code="200">Deal deleted successfully.</response>
            <response code="400">Failed to delete the deal or invalid ID.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.DealController.GetDeal(System.Guid)">
            <summary>
            Fetches a specific deal by its unique identifier.
            </summary>
            <param name="id">The unique identifier of the deal to be fetched.</param>
            <returns>
            Returns an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> containing the deal details if found, or an error message if not.
            </returns>
            <remarks>
            This method retrieves the deal using the <see cref="T:E_Commerce.Core.ServicesContract.IDealService"/>. If the deal is found, the details are returned; 
            otherwise, an error message is returned.
            </remarks>
            <response code="200">Deal retrieved successfully.</response>
            <response code="400">Failed to retrieve the deal or invalid ID.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.DealController.GetAllDeals(PaginationDto)">
            <summary>
            Fetches all deals available in the system.
            </summary>
            <returns>
            Returns an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> containing a list of all deals.
            </returns>
            <remarks>
            This method retrieves all deals using the <see cref="T:E_Commerce.Core.ServicesContract.IDealService"/>. 
            A collection of all deals is returned in the response.
            </remarks>
            <response code="200">All deals retrieved successfully.</response>
            <response code="400">Failed to retrieve the deals.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.DealController.GetAllDealsActive(PaginationDto)">
            <summary>
            Fetches all active deals available in the system.
            </summary>
            <returns>
            Returns an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> containing a list of all active deals.
            </returns>
            <remarks>
            This method retrieves all deals using the <see cref="T:E_Commerce.Core.ServicesContract.IDealService"/> and filters them to include only active deals.
            A collection of active deals is returned in the response.
            </remarks>
            <response code="200">All active deals retrieved successfully.</response>
            <response code="400">Failed to retrieve the active deals.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.DeliveryMethodController.AddDeliveryMethodAsync(E_Commerce.Core.Dtos.DeliveryMethodDto.DeliveryMethodAddRequest)">
            <summary>
            Adds a new delivery method.
            </summary>
            <param name="request">An object of type <see cref="T:E_Commerce.Core.Dtos.DeliveryMethodDto.DeliveryMethodAddRequest"/> containing the details for the new delivery method to be added.</param>
            <returns>
            Returns an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> with status code 200 (OK) if the delivery method is successfully added.
            If the creation fails, returns a 400 (Bad Request) with an error message.
            </returns>
            <remarks>
            This method is used to add a new delivery method to the system. It uses the <see cref="T:E_Commerce.Core.ServicesContract.IDeliveryMethodServices"/> to handle the creation logic. 
            A success message is returned if the delivery method is added, otherwise, an error message is returned.
            </remarks>
        </member>
        <member name="M:E_Commerce.API.Controllers.DeliveryMethodController.UpdateDeliveryMethodAsync(E_Commerce.Core.Dtos.DeliveryMethodDto.DeliveryMethodUpdateRequest)">
            <summary>
            Updates an existing delivery method.
            </summary>
            <param name="request">An object of type <see cref="T:E_Commerce.Core.Dtos.DeliveryMethodDto.DeliveryMethodUpdateRequest"/> containing the details for the delivery method to be updated.</param>
            <returns>
            Returns an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> with status code 200 (OK) if the delivery method is successfully updated.
            If the update fails, returns a 400 (Bad Request) with an error message.
            </returns>
            <remarks>
            This method is used to update the details of an existing delivery method. It uses the <see cref="T:E_Commerce.Core.ServicesContract.IDeliveryMethodServices"/> to handle the update logic.
            A success message is returned if the update is successful, otherwise, an error message is returned.
            </remarks>
        </member>
        <member name="M:E_Commerce.API.Controllers.DeliveryMethodController.DeleteDeliveryMethodAsync(System.Guid)">
            <summary>
            Deletes a specific delivery method by its ID.
            </summary>
            <param name="id">The unique identifier of the delivery method to delete.</param>
            <returns>
            Returns an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> with status code 200 (OK) if the delivery method is successfully deleted.
            If the deletion fails, returns a 400 (Bad Request) with an error message.
            </returns>
            <remarks>
            This method deletes a delivery method by its ID from the system.
            A success message is returned if the delivery method is deleted, otherwise, an error message is returned.
            </remarks>
        </member>
        <member name="M:E_Commerce.API.Controllers.DeliveryMethodController.GetDeliveryMethodAsync(System.Guid)">
            <summary>
            Retrieves the details of a specific delivery method by its ID.
            </summary>
            <param name="id">The unique identifier of the delivery method to retrieve.</param>
            <returns>
            Returns an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> with status code 200 (OK) and the details of the delivery method if found.
            If the delivery method is not found, returns a 404 (Not Found) with an error message.
            </returns>
            <remarks>
            This method retrieves the details of the delivery method with the specified ID.
            If the delivery method is found, its details are returned, otherwise a 404 (Not Found) response is returned.
            </remarks>
        </member>
        <member name="M:E_Commerce.API.Controllers.DeliveryMethodController.GetAllDeliveryMethodsAsync">
            <summary>
            Retrieves all delivery methods in the system.
            </summary>
            <returns>
            Returns an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> with status code 200 (OK) and a list of all delivery methods if found.
            If no delivery methods are found, returns a 404 (Not Found) with an error message.
            </returns>
            <remarks>
            This method fetches all delivery methods from the system.
            If no delivery methods are found, a 404 (Not Found) response is returned.
            Otherwise, the list of delivery methods is returned within an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> with a success message.
            </remarks>
        </member>
        <member name="M:E_Commerce.API.Controllers.OrderController.AddOrder(E_Commerce.Core.Dtos.OrderDto.OrderAddRequest)">
            <summary>
            Adds a new order based on the provided request data.
            </summary>
            <param name="request">An object of type <see cref="T:E_Commerce.Core.Dtos.OrderDto.OrderAddRequest"/> containing the details for the new order to be added. 
            This includes the user's address ID, delivery method ID, and a list of items in the order.</param>
            <returns>
            Returns an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> indicating success or failure. 
            If the order creation fails, a BadRequest response is returned, otherwise the created order details are returned.
            </returns>
            <remarks>
            This method validates the order request and uses the <see cref="!:OrderServices"/> to create the order. 
            The order details are then saved in the system and returned in the response.
            </remarks>
            <response code="200">Order added successfully.</response>
            <response code="400">Failed to add the Order or invalid data.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.OrderController.UpdateOrderStatus(System.Guid,E_Commerce.Core.Helper.OrderStatus)">
            <summary>
            Updates the status of an existing order.
            </summary>
            <param name="orderID">The unique identifier of the order to update.</param>
            <param name="orderStatus">An object containing the new status to be applied to the order.</param>
            <returns>
            Returns an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> indicating success or failure of the operation.
            A BadRequest response is returned if the update fails, otherwise a success message is returned.
            </returns>
            <remarks>
            This method updates the order status based on the provided order ID. 
            If the order status update is successful, a success message is returned.
            </remarks>
        </member>
        <member name="M:E_Commerce.API.Controllers.OrderController.DeleteOrder(System.Guid)">
            <summary>
            Deletes a specific order by its ID When the order is not Completed or Shipped.
            </summary>
            <param name="orderId">The unique identifier of the order to delete.</param>
            <returns>
            Returns an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> indicating the result of the operation.
            A BadRequest response is returned if the deletion fails, otherwise a success message is returned.
            </returns>
            <remarks>
            This method deletes the order with the given ID from the system.
            If the deletion is successful, a success message is returned; otherwise, an error message is returned.
            </remarks>
            <response code="200">Order deleted successfully.</response>
            <response code="400">Failed to delete the order.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.OrderController.GetOrder(System.Guid)">
            <summary>
            Retrieves the details of a specific order by its ID.
            </summary>
            <param name="orderId">The unique identifier of the order to retrieve.</param>
            <returns>
            Returns the details of the order if found, or a NotFound response if the order does not exist.
            </returns>
            <remarks>
            This method retrieves the details of the order with the specified ID. 
            If the order exists, its details are returned in the response, otherwise a NotFound response is returned.
            </remarks>
            <response code="200">Fetched order successfully.</response>
            <response code="404">Order Not found.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.OrderController.GetOrders">
            <summary>
            Retrieves all orders in the system.
            </summary>
            <returns>
            Returns a list of all orders if found, or a NotFound response if no orders exist.
            </returns>
            <remarks>
            This method fetches all orders from the system and returns them in a list. 
            If no orders are found, a NotFound response is returned. 
            Otherwise, the orders are returned within an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> with a success message.
            </remarks>
            <response code="200">Fetched orders successfully.</response>
            <response code="404">Orders Not found.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.OrderController.GetOrdersByUser">
            <summary>
            Retrieves a list of orders associated with the currently authenticated user.
            </summary>
            <remarks>
            This method retrieves the user's email from the HTTP context and finds the corresponding user in the database. 
            It then attempts to fetch all orders related to the user's ID. If the user or orders are not found, appropriate responses are returned.
            </remarks>
            <param name="email">The email address of the currently authenticated user, retrieved from the HTTP context.</param>
            <returns>
            Returns an <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> with a list of orders if found. 
            If no user or orders are found, a <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> with an error message and the corresponding HTTP status code is returned.
            </returns>
            <response code="200">Order added successfully.</response>
            <response code="400">Failed to add the Order or invalid data.</response>
            <response code="401">User is not authenticated.</response>
        </member>
        <member name="T:E_Commerce.API.Controllers.PaymentController">
            <summary>
            Controller for handling payment-related events and actions.
            </summary>
        </member>
        <member name="M:E_Commerce.API.Controllers.PaymentController.#ctor(Microsoft.Extensions.Logging.ILogger{E_Commerce.API.Controllers.PaymentController},E_Commerce.Core.ServicesContract.IOrderServices,E_Commerce.Core.Domain.RepositoriesContract.IUnitOfWork)">
            <summary>
            Initializes a new instance of the <see cref="T:E_Commerce.API.Controllers.PaymentController"/> class.
            </summary>
            <param name="logger">The logger instance for logging information and errors.</param>
            <param name="orderServices">The service for managing orders.</param>
            <param name="unitOfWork">The unit of work for handling database operations.</param>
        </member>
        <member name="M:E_Commerce.API.Controllers.PaymentController.Handle">
            <summary>
            Handles Stripe webhook events.
            </summary>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> indicating the result of the operation.</returns>
            <remarks>
            This endpoint listens for Stripe webhook events such as payment succeeded, payment failed, or charge refunded.
            </remarks>
        </member>
        <member name="M:E_Commerce.API.Controllers.PaymentController.GetOrder(System.String)">
            <summary>
            Retrieves the order associated with a specific payment intent ID.
            </summary>
            <param name="paymentIntentId">The ID of the payment intent.</param>
            <returns>The <see cref="T:Order"/> associated with the payment intent.</returns>
        </member>
        <member name="M:E_Commerce.API.Controllers.PaymentController.HandlePaymentSucceeded(Stripe.Event)">
            <summary>
            Handles the "payment_intent.succeeded" event from Stripe.
            </summary>
            <param name="stripeEvent">The Stripe event containing the payment intent details.</param>
        </member>
        <member name="M:E_Commerce.API.Controllers.PaymentController.HandlePaymentFailed(Stripe.Event)">
            <summary>
            Handles the "payment_intent.payment_failed" event from Stripe.
            </summary>
            <param name="stripeEvent">The Stripe event containing the payment intent details.</param>
        </member>
        <member name="M:E_Commerce.API.Controllers.PaymentController.HandleChargeRefunded(Stripe.Event)">
            <summary>
            Handles the "charge.refunded" event from Stripe.
            </summary>
            <param name="stripeEvent">The Stripe event containing the refund details.</param>
        </member>
        <member name="M:E_Commerce.API.Controllers.ProductController.AddProduct(E_Commerce.Core.Dtos.ProductDto.ProductAddRequest)">
            <summary>
            Adds a new product.
            </summary>
            <param name="productAddRequest">The product details to add.</param>
            <returns>An API response indicating the result of the operation.</returns>
            <response code="200">Product added successfully.</response>
            <response code="400">Failed to add the product or invalid data.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.ProductController.UpdateProduct(E_Commerce.Core.Dtos.ProductDto.ProductUpdateRequest)">
            <summary>
            Updates an existing product.
            </summary>
            <param name="productUpdateRequest">The product details to update.</param>
            <returns>An API response indicating the result of the operation.</returns>
            <response code="200">Product updated successfully.</response>
            <response code="400">Failed to update the product or invalid data.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.ProductController.DeleteProduct(System.Guid)">
            <summary>
            Deletes a product by its ID.
            </summary>
            <param name="id">The ID of the product to delete.</param>
            <returns>An API response indicating the result of the operation.</returns>
            <response code="200">Product deleted successfully.</response>
            <response code="400">Failed to delete the product or invalid ID.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.ProductController.GetAllProducts(PaginationDto)">
            <summary>
            Retrieves a paginated list of all products.
            </summary>
            <param name="pagination">The pagination details including page number and page size.</param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult`1"/> containing the result of the operation:
            <list type="bullet">
            <item><description><see cref="F:System.Net.HttpStatusCode.OK"/>: Products fetched successfully.</description></item>
            <item><description><see cref="F:System.Net.HttpStatusCode.BadRequest"/>: Failed to fetch products.</description></item>
            </list>
            </returns>
            <remarks>
            Use this endpoint to get a paginated list of all products.
            </remarks>
        </member>
        <member name="M:E_Commerce.API.Controllers.ProductController.GetTopProducts(PaginationDto)">
            <summary>
            Retrieves a paginated list of Top products.
            </summary>
            <param name="pagination">The pagination details including page number and page size.</param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult`1"/> containing the result of the operation:
            <list type="bullet">
            <item><description><see cref="F:System.Net.HttpStatusCode.OK"/>: Products fetched successfully.</description></item>
            <item><description><see cref="F:System.Net.HttpStatusCode.BadRequest"/>: Failed to fetch products.</description></item>
            </list>
            </returns>
            <remarks>
            Use this endpoint to get a paginated list of all products.
            </remarks>
        </member>
        <member name="M:E_Commerce.API.Controllers.ProductController.GetProduct(System.Guid)">
            <summary>
            Retrieves the details of a specific product by its ID.
            </summary>
            <param name="id">The unique identifier of the product.</param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult`1"/> containing the result of the operation:
            <list type="bullet">
            <item><description><see cref="F:System.Net.HttpStatusCode.OK"/>: Product fetched successfully.</description></item>
            <item><description><see cref="F:System.Net.HttpStatusCode.BadRequest"/>: Failed to fetch product.</description></item>
            </list>
            </returns>
            <remarks>
            Use this endpoint to get the details of a specific product by its ID.
            </remarks>
        </member>
        <member name="M:E_Commerce.API.Controllers.ProductController.SearchProduct(System.String,PaginationDto)">
            <summary>
            Searches for products by name with optional pagination.
            </summary>
            <param name="name">The name or part of the name of the product to search for.</param>
            <param name="pagination">The pagination details including page number and page size.</param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult`1"/> containing the result of the operation:
            <list type="bullet">
            <item><description><see cref="F:System.Net.HttpStatusCode.OK"/>: Products searched successfully.</description></item>
            <item><description><see cref="F:System.Net.HttpStatusCode.BadRequest"/>: Failed to search products.</description></item>
            </list>
            </returns>
            <remarks>
            Use this endpoint to search for products by their name.
            </remarks>
        </member>
        <member name="M:E_Commerce.API.Controllers.ProductController.GetProductsByDiscount(PaginationDto,System.Nullable{System.Double})">
            <summary>
            Fetches products by Discount with pagination.
            </summary>
            <param name="discount">Discount filter (0-100). 
            Note: if discount is null, it will return all products with discount greater than 0.
            if discount Not null , it will return all products with discount greater than or equal to the specified value.
            </param>
            <param name="pagination">Pagination details.</param>
            <returns>Paginated list of products with the specified rating.</returns>
            
        </member>
        <member name="M:E_Commerce.API.Controllers.ProductController.GetProductByCategory(System.Guid,PaginationDto)">
            <summary>
            Retrieves a paginated list of products by category.
            </summary>
            <param name="categoryId">The unique identifier of the category.</param>
            <param name="pagination">The pagination details including page number and page size.</param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult`1"/> containing the result of the operation:
            <list type="bullet">
            <item><description><see cref="F:System.Net.HttpStatusCode.OK"/>: Products fetched by category successfully.</description></item>
            <item><description><see cref="F:System.Net.HttpStatusCode.BadRequest"/>: Failed to fetch products by category.</description></item>
            </list>
            </returns>
            <remarks>
            Use this endpoint to get a paginated list of products within a specific category.
            </remarks>
        </member>
        <member name="M:E_Commerce.API.Controllers.ProductController.GetProductByParentCategory(System.Guid,PaginationDto)">
            <summary>
            Retrieves a paginated list of products by category.
            </summary>
            <param name="parentID">The unique identifier of the category.</param>
            <param name="pagination">The pagination details including page number and page size.</param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult`1"/> containing the result of the operation:
            <list type="bullet">
            <item><description><see cref="F:System.Net.HttpStatusCode.OK"/>: Products fetched by category successfully.</description></item>
            <item><description><see cref="F:System.Net.HttpStatusCode.BadRequest"/>: Failed to fetch products by category.</description></item>
            </list>
            </returns>
            <remarks>
            Use this endpoint to get a paginated list of products within a specific category.
            </remarks>
        </member>
        <member name="M:E_Commerce.API.Controllers.ProductController.GetProductByBrand(System.Guid,PaginationDto)">
            <summary>
            Fetches products by brand ID with pagination.
            </summary>
            <param name="brandId">Brand ID to filter products.</param>
            <param name="pagination">Pagination details.</param>
            <returns>Paginated list of products for the specified brand.</returns>
        </member>
        <member name="M:E_Commerce.API.Controllers.ProductController.GetProductByPriceRange(E_Commerce.Core.Dtos.RangeDto)">
            <summary>
            Fetches products within a specified price range.
            </summary>
            <param name="range">Price range filter.</param>
            <returns>List of products within the specified price range.</returns>
        </member>
        <member name="M:E_Commerce.API.Controllers.ProductController.GetProductByRating(System.Int32,PaginationDto)">
            <summary>
            Fetches products by rating with pagination.
            </summary>
            <param name="rating">Rating filter (0-10).</param>
            <param name="pagination">Pagination details.</param>
            <returns>Paginated list of products with the specified rating.</returns>
            
        </member>
        <member name="M:E_Commerce.API.Controllers.ProductController.GetProductByCategoryName(System.String,PaginationDto)">
            <summary>
            Fetches products by Category Name with pagination.
            </summary>
            <param name="name">represent category name.</param>
            <param name="pagination">Pagination details.</param>
            <returns>Paginated list of products with the specified category.</returns>
        </member>
        <member name="M:E_Commerce.API.Controllers.ProductController.GetProductByBrandName(System.String,PaginationDto)">
            <summary>
            Fetches products by Brand Name with pagination.
            </summary>
            <param name="name">represent Brand name.</param>
            <param name="pagination">Pagination details.</param>
            <returns>Paginated list of products with the specified Brand.</returns>
        </member>
        <member name="M:E_Commerce.API.Controllers.ReviewController.AddReview(E_Commerce.Core.Dtos.ReviewDto.ReviewAddRequest)">
            <summary>
            Adds a review for a product.
            </summary>
            <param name="request">The review add request containing review details.</param>
            <returns>An <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> indicating the result of the operation.</returns>
            <response code="200">Review added successfully.</response>
            <response code="400">Failed to add the review.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.ReviewController.UpdateReview(E_Commerce.Core.Dtos.ReviewDto.ReviewUpdateRequest)">
            <summary>
            Updates an existing review.
            </summary>
            <param name="request">The review update request containing updated review details.</param>
            <returns>An <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> indicating the result of the operation.</returns>
            <response code="200">Review updated successfully.</response>
            <response code="400">Failed to update the review.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.ReviewController.DeleteReview(System.Guid)">
            <summary>
            Deletes a review by its ID.
            </summary>
            <param name="id">The ID of the review to be deleted.</param>
            <returns>An <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> indicating the result of the operation.</returns>
            <response code="200">Review deleted successfully.</response>
            <response code="400">Failed to delete the review.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.ReviewController.GetReview(System.Guid)">
            <summary>
            Retrieves a specific review by its ID.
            </summary>
            <param name="id">The ID of the review to retrieve.</param>
            <returns>An <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> containing the review details.</returns>
            <response code="200">Review retrieved successfully.</response>
            <response code="400">Failed to retrieve the review.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.ReviewController.GetAllReviews(System.Guid,PaginationDto)">
            <summary>
            Retrieves all reviews for a product.
            </summary>
            <param name="productID">The ID of the product for which reviews are to be fetched.</param>
            <param name="pagination">Pagination parameters for the review list.</param>
            <returns>An <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> containing the list of reviews for the product.</returns>
            <response code="200">Reviews retrieved successfully.</response>
            <response code="400">Failed to retrieve reviews.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.ReviewController.GetReviewReplies(System.Guid,PaginationDto)">
            <summary>
            Retrieves all replies to a specific review.
            </summary>
            <param name="reviewID">The ID of the review for which replies are to be fetched.</param>
            <param name="pagination">Pagination parameters for the reply list.</param>
            <returns>An <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> containing the list of replies to the review.</returns>
            <response code="200">Review replies retrieved successfully.</response>
            <response code="400">Failed to retrieve review replies.</response>
        </member>
        <member name="T:E_Commerce.API.Controllers.ShoppingCartController">
            <summary>
            Provides endpoints for managing the shopping cart.
            Interacts with Redis to retrieve, update, and delete cart data.
            </summary>
        </member>
        <member name="M:E_Commerce.API.Controllers.ShoppingCartController.#ctor(E_Commerce.Core.ServicesContract.IShoppingCartService,Microsoft.AspNetCore.Http.IHttpContextAccessor,E_Commerce.Core.Domain.RepositoriesContract.IUnitOfWork)">
            <summary>
            Initializes a new instance of the <see cref="T:E_Commerce.API.Controllers.ShoppingCartController"/> class.
            </summary>
            <param name="shoppingCartService">Service for shopping cart operations.</param>
            <param name="httpContextAccessor">Accessor for HTTP context to retrieve user information.</param>
            <param name="unitOfWork">Unit of work to manage repositories and database transactions.</param>
        </member>
        <member name="M:E_Commerce.API.Controllers.ShoppingCartController.GetCart(System.Threading.CancellationToken)">
            <summary>
            Retrieves the current user's shopping cart.
            </summary>
            <param name="cancellationToken">Token to observe while waiting for the task to complete.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the user's shopping cart.</returns>
            <remarks>
            This endpoint requires the user to be authenticated.
            </remarks>
        </member>
        <member name="M:E_Commerce.API.Controllers.ShoppingCartController.AddToCart(E_Commerce.Core.Domain.Entities.CartItems,System.Threading.CancellationToken)">
            <summary>
            Adds an item to the current user's shopping cart.
            </summary>
            <param name="item">The item to be added to the cart.</param>
            <param name="cancellationToken">Token to observe while waiting for the task to complete.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> indicating the operation result.</returns>
            <remarks>
            This endpoint requires the user to be authenticated.
            </remarks>
        </member>
        <member name="M:E_Commerce.API.Controllers.ShoppingCartController.RemoveFromCart(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Removes an item from the current user's shopping cart.
            </summary>
            <param name="userId">The ID of the user whose cart item is to be removed.</param>
            <param name="productId">The ID of the product to be removed from the cart.</param>
            <param name="cancellationToken">Token to observe while waiting for the task to complete.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> indicating the operation result.</returns>
            <remarks>
            This endpoint requires the user to be authenticated.
            </remarks>
        </member>
        <member name="M:E_Commerce.API.Controllers.ShoppingCartController.ClearCart(System.String,System.Threading.CancellationToken)">
            <summary>
            Clears all items in the current user's shopping cart.
            </summary>
            <param name="userId">The ID of the user whose cart is to be cleared.</param>
            <param name="cancellationToken">Token to observe while waiting for the task to complete.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> indicating the operation result.</returns>
            <remarks>
            This endpoint requires the user to be authenticated.
            </remarks>
        </member>
        <member name="T:E_Commerce.API.Controllers.TechnicalSpecificationController">
            <summary>
            API Controller for managing Technical Specification for product.
            </summary>
        </member>
        <member name="M:E_Commerce.API.Controllers.TechnicalSpecificationController.AddSpecification(E_Commerce.Core.Dtos.TechnicalSpecificationDto.TechnicalSpecificationAddRequest)">
            <summary>
            Adds a new technical specification for a product.
            </summary>
            <param name="request">The request containing the details of the technical specification to add.</param>
            <returns>An API response indicating the result of the operation.</returns>
            <response code="200">Technical specification added successfully.</response>
            <response code="404">Product not found.</response>
            <response code="400">Failed to add the technical specification.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.TechnicalSpecificationController.UpdateSpecification(E_Commerce.Core.Dtos.TechnicalSpecificationDto.TechnicalSpecificationUpdateRequest)">
            <summary>
            Updates an existing technical specification.
            </summary>
            <param name="request">The request containing updated details for the technical specification.</param>
            <returns>An API response indicating the result of the operation.</returns>
            <response code="200">Technical specification updated successfully.</response>
            <response code="404">Product or technical specification not found.</response>
            <response code="400">Failed to update the technical specification.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.TechnicalSpecificationController.DeleteAsync(System.Guid)">
            <summary>
            Deletes a technical specification by its ID.
            </summary>
            <param name="id">The ID of the technical specification to delete.</param>
            <returns>An API response indicating the result of the operation.</returns>
            <response code="200">Technical specification deleted successfully.</response>
            <response code="400">Failed to delete the technical specification.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.TechnicalSpecificationController.GetByAsync(System.Guid)">
            <summary>
            Retrieves a technical specification by its ID.
            </summary>
            <param name="id">The ID of the technical specification to retrieve.</param>
            <returns>An API response containing the requested technical specification.</returns>
            <response code="200">Technical specification retrieved successfully.</response>
            <response code="404">Technical specification not found.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.TechnicalSpecificationController.GetAllSpecificationsForProduct(System.Guid)">
            <summary>
            Retrieves all technical specifications for a specific product.
            </summary>
            <param name="productID">The ID of the product.</param>
            <returns>An API response containing the list of technical specifications.</returns>
            <response code="200">Technical specifications retrieved successfully.</response>
            <response code="404">Technical specifications not found.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.VoteController.UpVote(E_Commerce.Core.Dtos.VoteDto.VoteAddRequest)">
            <summary>
            Upvotes a review.
            </summary>
            <param name="request">The vote request containing the review ID and vote details.</param>
            <returns>An <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> indicating the result of the upvote operation.</returns>
            <response code="200">Upvoted successfully.</response>
            <response code="400">Failed to upvote.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.VoteController.DownVote(E_Commerce.Core.Dtos.VoteDto.VoteAddRequest)">
            <summary>
            Downvotes a review.
            </summary>
            <param name="request">The vote request containing the review ID and vote details.</param>
            <returns>An <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> indicating the result of the downvote operation.</returns>
            <response code="200">Downvoted successfully.</response>
            <response code="400">Failed to downvote.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.VoteController.GetAll(System.Guid)">
            <summary>
            Retrieves all votes for a specific review.
            </summary>
            <param name="reviewId">The ID of the review for which votes are to be fetched.</param>
            <returns>An <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> containing the list of votes for the review.</returns>
            <response code="200">Votes retrieved successfully.</response>
            <response code="500">An error occurred while retrieving votes.</response>
        </member>
        <member name="T:E_Commerce.API.Controllers.WishlistController">
            <summary>
            Controller for managing wishlist operations, such as adding, removing, and retrieving wishlist items.
            </summary>
        </member>
        <member name="M:E_Commerce.API.Controllers.WishlistController.#ctor(E_Commerce.Core.ServicesContract.IWishlistService,Microsoft.Extensions.Logging.ILogger{E_Commerce.API.Controllers.WishlistController},E_Commerce.Core.Domain.RepositoriesContract.IUnitOfWork,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:E_Commerce.API.Controllers.WishlistController"/> class.
            </summary>
            <param name="wishlistService">Service for managing wishlist operations.</param>
            <param name="logger">Logger for logging operations and errors.</param>
            <param name="unitOfWork">Unit of work for database operations.</param>
            <param name="httpContextAccessor">Accessor for HTTP context.</param>
        </member>
        <member name="M:E_Commerce.API.Controllers.WishlistController.AddProductToWishList(E_Commerce.Core.Dtos.WishlistDto.WishlistAddRequest)">
            <summary>
            Adds a product to the user's wishlist.
            </summary>
            <param name="request">The wishlist add request containing the product details.</param>
            <returns>An <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> indicating the result of the operation.</returns>
            <response code="200">Product added to wishlist successfully.</response>
            <response code="400">Failed to add product to wishlist.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.WishlistController.RemoveProductFromWishlist(System.Guid)">
            <summary>
            Removes a product from the user's wishlist.
            </summary>
            <param name="productID">The ID of the product to remove from the wishlist.</param>
            <returns>An <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> indicating the result of the operation.</returns>
            <response code="200">Product removed from wishlist successfully.</response>
            <response code="400">Failed to remove product from wishlist.</response>
        </member>
        <member name="M:E_Commerce.API.Controllers.WishlistController.GetWishlist">
            <summary>
            Retrieves the wishlist of the authenticated user.
            </summary>
            <returns>An <see cref="T:E_Commerce.Core.Dtos.ApiResponse"/> containing the user's wishlist.</returns>
            <response code="200">Wishlist retrieved successfully.</response>
            <response code="401">User is not authenticated.</response>
            <response code="404">User not found.</response>
            <response code="400">Failed to retrieve wishlist.</response>
        </member>
        <member name="T:E_Commerce.API.FileServices.FileService">
            <summary>
            Provides file-related services for the application.
            </summary>
        </member>
        <member name="M:E_Commerce.API.FileServices.FileService.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.Extensions.Logging.ILogger{E_Commerce.API.FileServices.FileService})">
            <summary>
            Initializes a new instance of the <see cref="T:E_Commerce.API.FileServices.FileService"/> class.
            </summary>
            <param name="environment">The web host environment.</param>
            <param name="httpContextAccessor">The HTTP context accessor.</param>
        </member>
        <member name="M:E_Commerce.API.FileServices.FileService.CreateFile(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Creates a new file in the "Upload" directory.
            </summary>
            <param name="file">The file to be created.</param>
            <returns>The URL of the created file.</returns>
        </member>
        <member name="M:E_Commerce.API.FileServices.FileService.DeleteFile(System.String)">
            <summary>
            Deletes a file from the "Upload" directory.
            </summary>
            <param name="fileName">The URL of the file to be deleted.</param>
        </member>
        <member name="M:E_Commerce.API.FileServices.FileService.UpdateFile(Microsoft.AspNetCore.Http.IFormFile,System.String)">
            <summary>
            Updates a file in the "Upload" directory.
            </summary>
            <param name="newFile">The new file to be updated.</param>
            <param name="currentFileName">The URL of the current file to be replaced.</param>
            <returns>The URL of the updated file.</returns>
        </member>
        <member name="T:E_Commerce.API.Middleware.GlobalExceptionHandlingMiddleware">
            <summary>
            Middleware to handle global exceptions.
            </summary>
        </member>
        <member name="M:E_Commerce.API.Middleware.GlobalExceptionHandlingMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{E_Commerce.API.Middleware.GlobalExceptionHandlingMiddleware},Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:E_Commerce.API.Middleware.GlobalExceptionHandlingMiddleware"/> class.
            </summary>
            <param name="next">The next middleware in the pipeline.</param>
            <param name="logger">Logger instance.</param>
            <param name="environment">Environment to check if running in Development.</param>
        </member>
        <member name="M:E_Commerce.API.Middleware.GlobalExceptionHandlingMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invokes the middleware to handle the HTTP context.
            </summary>
        </member>
        <member name="M:E_Commerce.API.Middleware.GlobalExceptionHandlingMiddleware.HandleExceptionAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception)">
            <summary>
            Handles exceptions and writes a standardized response.
            </summary>
        </member>
        <member name="T:E_Commerce.API.Middleware.GlobalExceptionHandlingMiddlewareExtensions">
            <summary>
            Extension methods to add the <see cref="T:E_Commerce.API.Middleware.GlobalExceptionHandlingMiddleware"/> to the application's request pipeline.
            </summary>
        </member>
        <member name="M:E_Commerce.API.Middleware.GlobalExceptionHandlingMiddlewareExtensions.UseGlobalExceptionHandlingMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Adds the <see cref="T:E_Commerce.API.Middleware.GlobalExceptionHandlingMiddleware"/> to the application's request pipeline.
            </summary>
        </member>
        <member name="T:E_Commerce.API.Program">
            <summary>
            The main namespace for the E-Commerce API application.
            </summary>
        </member>
        <member name="M:E_Commerce.API.Program.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
            <param name="args">An array of command-line arguments.</param>
        </member>
        <member name="T:E_Commerce.API.StartupExtensions.ConfigureServiceExtension">
            <summary>
            Provides extension methods for configuring services in the application.
            </summary>
        </member>
        <member name="M:E_Commerce.API.StartupExtensions.ConfigureServiceExtension.ServiceConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures the services required for the application.
            </summary>
            <param name="services">The service collection to add the services to.</param>
            <param name="configuration">The configuration to use for setting up the services.</param>
            <returns>The updated service collection.</returns>
        </member>
    </members>
</doc>
